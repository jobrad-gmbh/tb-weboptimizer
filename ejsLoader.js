#!/usr/bin/env node
// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons
    naming 3.0 unported license.
    See https://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _core = require("@babel/core");

var _babelPresetMinify = _interopRequireDefault(require("babel-preset-minify"));

var _clientnode = _interopRequireDefault(require("clientnode"));

var _ejs = _interopRequireDefault(require("ejs"));

var _fs = _interopRequireDefault(require("fs"));

var _htmlMinifier = require("html-minifier");

var loaderUtils = _interopRequireWildcard(require("loader-utils"));

var _path = _interopRequireDefault(require("path"));

var _configurator = _interopRequireDefault(require("./configurator"));

var _helper = _interopRequireDefault(require("./helper"));

/*
    NOTE: Would result in error: "TypeError:
    ../webOptimizer/unknown: Cannot read property
    'contextVariables' of undefined

    import transformWith from 'babel-plugin-transform-with'
*/
// endregion
module.exports = function (source) {
  var _this = this;

  if ('cachable' in this && this.cacheable) this.cacheable();

  var query = _clientnode["default"].convertSubstringInPlainObject(_clientnode["default"].extend(true, {
    compileSteps: 2,
    compress: {
      html: {},
      javaScript: {}
    },
    context: './',
    extensions: {
      file: {
        external: [],
        internal: ['.js', '.json', '.css', '.svg', '.png', '.jpg', '.gif', '.ico', '.html', '.eot', '.ttf', '.woff', '.woff2']
      },
      module: []
    },
    module: {
      aliases: {},
      replacements: {}
    }
  }, this.options || {}, 'query' in this ? loaderUtils.getOptions(this) || {} : {}), /#%%%#/g, '!');

  var compile = function compile(template) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : query.compiler;
    var compileSteps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    return function () {
      var locals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      options = _clientnode["default"].extend(true, {
        filename: template
      }, options);

      var require = function require(request) {
        var nestedLocals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var template = request.replace(/^(.+)\?[^?]+$/, '$1');
        var queryMatch = /^[^?]+\?(.+)$/.exec(request);

        if (queryMatch) {
          var evaluationFunction = function evaluationFunction(request, template, source, compile, locals) {
            return new Function('request', 'template', 'source', 'compile', 'locals', "return ".concat(queryMatch[1]))(request, template, source, compile, locals);
          };

          nestedLocals = _clientnode["default"].extend(true, nestedLocals, evaluationFunction(request, template, source, compile, locals));
        }

        var nestedOptions = _clientnode["default"].copy(options);

        delete nestedOptions.client;
        nestedOptions = _clientnode["default"].extend(true, {
          encoding: _configurator["default"].encoding
        }, nestedOptions, nestedLocals.options || {});
        if (nestedOptions.isString) return compile(template, nestedOptions)(nestedLocals);

        var templateFilePath = _helper["default"].determineModuleFilePath(template, query.module.aliases, query.module.replacements, {
          file: query.extensions.file.internal,
          module: query.extensions.module
        }, query.context, _configurator["default"].path.source.asset.base, _configurator["default"].path.ignore, _configurator["default"].module.directoryNames, _configurator["default"]["package"].main.fileNames, _configurator["default"]["package"].main.propertyNames, _configurator["default"]["package"].aliasPropertyNames, _configurator["default"].encoding);

        if (templateFilePath) {
          if ('query' in _this) _this.addDependency(templateFilePath);
          /*
              NOTE: If there aren't any locals options or variables and
              file doesn't seem to be an ejs template we simply load
              included file content.
          */

          if (queryMatch || templateFilePath.endsWith('.ejs')) return compile(templateFilePath, nestedOptions)(nestedLocals);
          return _fs["default"].readFileSync(templateFilePath, nestedOptions);
        }

        throw new Error("Given template file \"".concat(template, "\" couldn't be resolved."));
      };

      var compressHTML = function compressHTML(content) {
        return query.compress.html ? (0, _htmlMinifier.minify)(content, _clientnode["default"].extend(true, {
          caseSensitive: true,
          collapseInlineTagWhitespace: true,
          collapseWhitespace: true,
          conservativeCollapse: true,
          minifyCSS: true,
          minifyJS: true,
          processScripts: ['text/ng-template', 'text/x-handlebars-template'],
          removeAttributeQuotes: true,
          removeComments: true,
          removeRedundantAttributes: true,
          removeScriptTypeAttributes: true,
          removeStyleLinkTypeAttributes: true,
          sortAttributes: true,
          sortClassName: true,

          /*
              NOTE: Avoids whitespace around placeholder in
              tags.
          */
          trimCustomFragments: true,
          useShortDoctype: true
        }, query.compress.html)) : content;
      };

      var remainingSteps = compileSteps;
      var result = template;
      var isString = options.isString;
      delete options.isString;

      while (remainingSteps > 0) {
        if (typeof result === 'string') {
          var filePath = isString && options.filename || result;
          if (filePath && _path["default"].extname(filePath) === '.js') result = eval('require')(filePath);else {
            if (!isString) {
              var encoding = _configurator["default"].encoding;
              if (typeof options.encoding === 'string') encoding = options.encoding;
              result = _fs["default"].readFileSync(result, {
                encoding: encoding
              });
            }

            if (remainingSteps === 1) result = compressHTML(result);
            result = _ejs["default"].compile(result, options);
          }
        } else result = compressHTML(result(_clientnode["default"].extend(true, {
          configuration: _configurator["default"],
          Helper: _helper["default"],
          include: require,
          require: require,
          Tools: _clientnode["default"]
        }, locals)));

        remainingSteps -= 1;
      }

      if (compileSteps % 2) {
        var code = "module.exports = ".concat(result.toString(), ";");
        var processed = (0, _core.transformSync)(code, {
          ast: false,
          babelrc: false,
          comments: !query.compress.javaScript,
          compact: Boolean(query.compress.javaScript),
          filename: options.filename || 'unknown',
          minified: Boolean(query.compress.javaScript),

          /*
              NOTE: See corresponding import statement.
          plugins: [transformWith],
          */
          presets: query.compress.javaScript ? [[_babelPresetMinify["default"], query.compress.javaScript]] : [],
          sourceMaps: false,
          sourceType: 'script'
        });
        if (processed && typeof processed.code === 'string') code = processed.code;
        return "'use strict';\n".concat(code);
      }

      if (typeof result === 'string') {
        result = result.replace(new RegExp("<script +processing-workaround *" + "(?:= *(?:\" *\"|' *') *)?>([\\s\\S]*?)</ *script *>", 'ig'), '$1').replace(new RegExp("<script +processing(-+)-workaround *" + "(?:= *(?:\" *\"|' *') *)?>([\\s\\S]*?)</ *script *>", 'ig'), '<script processing$1workaround>$2</script>');
        return result;
      }

      return '';
    };
  };

  return compile(source, {
    client: Boolean(query.compileSteps % 2),
    compileDebug: this.debug || false,
    debug: this.debug || false,
    filename: 'query' in this ? loaderUtils.getRemainingRequest(this).replace(/^!/, '') : this.filename || null,
    isString: true
  }, query.compileSteps)(query.locals || {});
}; // region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;charset=utf-8;base64,